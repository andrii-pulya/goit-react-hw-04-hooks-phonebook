{"version":3,"sources":["components/AddContactForm/AddContactForm.styled.jsx","components/AddContactForm/AddContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactList/ContactList.jsx","components/PageWrapper/PageWrapper.styled.jsx","components/ContactFilter/ContactFilter.styled.jsx","components/ContactFilter/ContactFilter.jsx","App.js","index.js"],"names":["AddContactContainer","FormContainer","ItemFormLabel","ContactBtn","AddContactBtn","text","AddContactForm","onSubmit","useState","name","setName","number","setNumber","handlechange","e","target","value","preventDefault","type","pattern","title","placeholder","autoComplete","onChange","required","propTypes","PropTypes","func","isRequired","ContactListContainer","Headline","ContactItemContainer","ContactItem","DeleteBtn","ItemName","ContactList","contacts","onDeleteContact","length","map","contact","onClick","id","PageWrapper","ContactFilterContainer","ContactFilterName","ContactFilterInput","ContactFilter","filter","App","JSON","parse","window","localStorage","getItem","setContacts","setFilter","deleteContact","prevContacts","useEffect","setItem","stringify","find","alert","nanoid","normalizedFilter","toLowerCase","includes","rendedContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7b38be1.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddContactContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  width: max-content;\r\n  align-items: center;\r\n`\r\nexport const FormContainer = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nexport const ItemFormLabel = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst ContactBtn = styled.button`\r\n  display: block;\r\n  padding: 5px;\r\n  margin: 10px 0px;\r\n  width: max-content;\r\n  coursor: pointer;\r\n  margin: 20px auto;\r\n`\r\n\r\nexport function AddContactBtn({ text }) {\r\n  return <ContactBtn>{text}</ContactBtn>\r\n}\r\n\r\nAddContactBtn.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n  AddContactContainer,\r\n  AddContactBtn,\r\n  FormContainer,\r\n  ItemFormLabel,\r\n} from './AddContactForm.styled'\r\n\r\nexport default function AddContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  function submitContacts(e) {\r\n    e.preventDefault()\r\n    onSubmit(name, number)\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  function handlechange(e) {\r\n    const { name, value } = e.target\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value)\r\n        break\r\n      case 'number':\r\n        setNumber(value)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AddContactContainer>\r\n        <h1>Phonebook</h1>\r\n        <FormContainer onSubmit={submitContacts}>\r\n          <ItemFormLabel>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              placeholder=\"Put the name here\"\r\n              autoComplete=\"off\"\r\n              value={name}\r\n              onChange={handlechange}\r\n              required\r\n            />\r\n          </ItemFormLabel>\r\n          <ItemFormLabel>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              placeholder=\"Put the number here\"\r\n              autoComplete=\"off\"\r\n              value={number}\r\n              onChange={handlechange}\r\n              required\r\n            />\r\n          </ItemFormLabel>\r\n          <AddContactBtn type=\"submit\" text={'Add contact'} />\r\n        </FormContainer>\r\n      </AddContactContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nFormContainer.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n}\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const ContactListContainer = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n`\r\nexport const Headline = styled.h2`\r\n  text-align: center;\r\n`\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const ContactItemContainer = styled.div`\r\n  display: flex;\r\n`\r\nexport const ContactItem = styled.li``\r\n\r\nexport const DeleteBtn = styled.button`\r\n  width: max-content;\r\n  padding: 3px 5px;\r\n`\r\nexport const ItemName = styled.p`\r\n  display: block;\r\n  width: 250px;\r\n  margin: 0;\r\n`\r\n","import PropTypes from 'prop-types'\r\n\r\nimport { ContactListContainer, Headline } from './ContactList.styled'\r\nimport {\r\n  ContactItemContainer,\r\n  ContactItem,\r\n  ItemName,\r\n  DeleteBtn,\r\n} from '../ContactItem/ContactItem.styled'\r\n\r\nexport default function ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <>\r\n      <ContactListContainer>\r\n        {contacts.length === 0 ? (\r\n          <Headline>Can not find the Contact</Headline>\r\n        ) : (\r\n          <Headline>Contacts</Headline>\r\n        )}\r\n\r\n        {contacts.map((contact) => (\r\n          <ContactItem key={contact.id}>\r\n            <ContactItemContainer>\r\n              <ItemName>\r\n                {contact.name}\r\n                {': '}\r\n                {contact.number}\r\n              </ItemName>\r\n              <DeleteBtn\r\n                onClick={() => onDeleteContact(contact.id)}\r\n                type=\"button\"\r\n              >\r\n                Delete\r\n              </DeleteBtn>\r\n            </ContactItemContainer>\r\n          </ContactItem>\r\n        ))}\r\n      </ContactListContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n}\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const PageWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n`\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const ContactFilterContainer = styled.label``\r\n\r\nexport const ContactFilterName = styled.p`\r\n  font-weight: 500;\r\n  font-style: italic;\r\n`\r\n\r\nexport const ContactFilterInput = styled.input``\r\n","import PropTypes from 'prop-types'\r\n\r\nimport {\r\n  ContactFilterContainer,\r\n  ContactFilterInput,\r\n  ContactFilterName,\r\n} from './ContactFilter.styled'\r\n\r\nexport default function ContactFilter({ filter, onChange }) {\r\n  return (\r\n    <ContactFilterContainer>\r\n      <ContactFilterName>Find contact by name</ContactFilterName>\r\n      <ContactFilterInput\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        value={filter}\r\n        onChange={onChange}\r\n      />\r\n    </ContactFilterContainer>\r\n  )\r\n}\r\n\r\nContactFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n}\r\n","import './App.css'\n\nimport React, { useState, useEffect } from 'react'\nimport { nanoid } from 'nanoid'\n\nimport AddContactForm from './components/AddContactForm/AddContactForm.jsx'\nimport ContactList from './components/ContactList/ContactList.jsx'\nimport { PageWrapper } from './components/PageWrapper/PageWrapper.styled.jsx'\nimport ContactFilter from './components/ContactFilter/ContactFilter.jsx'\n\nexport default function App() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(window.localStorage.getItem('contacts')) ?? [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n  )\n  const [filter, setFilter] = useState('')\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts))\n  }, [contacts])\n\n  function addContact(name, number) {\n    if (contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is already in contacts`)\n      return false\n    }\n    setContacts((prevContacts) => [\n      {\n        id: nanoid(),\n        name: name,\n        number: number,\n      },\n      ...prevContacts,\n    ])\n  }\n\n  function deleteContact(id) {\n    setContacts((prevContacts) => {\n      prevContacts.filter((contact) => contact.id !== id)\n    })\n  }\n\n  function handleChange(e) {\n    const { value } = e.target\n    setFilter(value)\n  }\n\n  function rendedContact() {\n    const normalizedFilter = filter.toLowerCase()\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    )\n  }\n\n  return (\n    <PageWrapper>\n      <AddContactForm onSubmit={addContact} />\n      <ContactFilter filter={filter} onChange={handleChange} />\n      {filter.length === 0 ? (\n        contacts.length === 0 ? (\n          <h1>You have not contacts saved</h1>\n        ) : (\n          <ContactList contacts={contacts} onDeleteContact={deleteContact} />\n        )\n      ) : (\n        <ContactList\n          contacts={rendedContact()}\n          onDeleteContact={deleteContact}\n        />\n      )}\n    </PageWrapper>\n  )\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}